// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyDbContext;

#nullable disable

namespace BankingSystem.Migrations.Sqlite
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20250912154151_Latest3")]
    partial class Latest3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Model.AccountModel", b =>
                {
                    b.Property<long>("AccountNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccountClosed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastTransactionAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccountNumber");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DbAccount");
                });

            modelBuilder.Entity("Model.AccountUpdateTicket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedChange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TicketId");

                    b.HasIndex("AccountNumber");

                    b.ToTable("DbAccountUpdateTickets");
                });

            modelBuilder.Entity("Model.CustomerQueryModel", b =>
                {
                    b.Property<int>("CustomerQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QueryTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SolvedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SolvedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomerQueryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PriorityId");

                    b.HasIndex("QueryTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("DbCustomerQuery");
                });

            modelBuilder.Entity("Model.CustomerQueryPriorityModel", b =>
                {
                    b.Property<int>("QueryPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QueryPriorityId");

                    b.ToTable("DbQueryPriority");

                    b.HasData(
                        new
                        {
                            QueryPriorityId = 1,
                            PriorityName = "Low"
                        },
                        new
                        {
                            QueryPriorityId = 2,
                            PriorityName = "Medium"
                        },
                        new
                        {
                            QueryPriorityId = 3,
                            PriorityName = "High"
                        },
                        new
                        {
                            QueryPriorityId = 4,
                            PriorityName = "Urgent"
                        });
                });

            modelBuilder.Entity("Model.CustomerQueryStatusModel", b =>
                {
                    b.Property<int>("QueryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QueryStatusId");

                    b.ToTable("DbQueryStatus");

                    b.HasData(
                        new
                        {
                            QueryStatusId = 1,
                            StatusName = "Open"
                        },
                        new
                        {
                            QueryStatusId = 2,
                            StatusName = "Pending"
                        },
                        new
                        {
                            QueryStatusId = 3,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("Model.LoanModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentSalaryInLPA")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoanAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoanTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isProcessed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LoanTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DbLoan");
                });

            modelBuilder.Entity("Model.LoanTypeModel", b =>
                {
                    b.Property<int>("LoanTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoanTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoanTypeId");

                    b.ToTable("DbLoanType");

                    b.HasData(
                        new
                        {
                            LoanTypeId = 1,
                            LoanTypeName = "Personal Loan"
                        },
                        new
                        {
                            LoanTypeId = 2,
                            LoanTypeName = "Home Loan"
                        },
                        new
                        {
                            LoanTypeId = 3,
                            LoanTypeName = "Car Loan"
                        },
                        new
                        {
                            LoanTypeId = 4,
                            LoanTypeName = "Education Loan"
                        });
                });

            modelBuilder.Entity("Model.MasterAccountTypeModel", b =>
                {
                    b.Property<int>("AccountTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountTypeID");

                    b.ToTable("DbAccountType");

                    b.HasData(
                        new
                        {
                            AccountTypeID = 1,
                            AccountType = "Savings"
                        },
                        new
                        {
                            AccountTypeID = 2,
                            AccountType = "Current"
                        },
                        new
                        {
                            AccountTypeID = 3,
                            AccountType = "Salary"
                        });
                });

            modelBuilder.Entity("Model.MasterCustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerTypeId");

                    b.ToTable("DbCustomerTypes");

                    b.HasData(
                        new
                        {
                            CustomerTypeId = 1,
                            CustomerType = "Individual"
                        },
                        new
                        {
                            CustomerTypeId = 2,
                            CustomerType = "Company"
                        },
                        new
                        {
                            CustomerTypeId = 3,
                            CustomerType = "Minnor"
                        },
                        new
                        {
                            CustomerTypeId = 4,
                            CustomerType = "Joint"
                        },
                        new
                        {
                            CustomerTypeId = 5,
                            CustomerType = "Nil"
                        });
                });

            modelBuilder.Entity("Model.MasterRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("DbRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Customer"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Manager"
                        });
                });

            modelBuilder.Entity("Model.MasterTransactionType", b =>
                {
                    b.Property<int>("TransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionTypeID");

                    b.ToTable("DbTransactionTypes");

                    b.HasData(
                        new
                        {
                            TransactionTypeID = 1,
                            TransactionType = "Deposit"
                        },
                        new
                        {
                            TransactionTypeID = 2,
                            TransactionType = "Withdrawal"
                        },
                        new
                        {
                            TransactionTypeID = 3,
                            TransactionType = "Transfer"
                        });
                });

            modelBuilder.Entity("Model.OTPValidationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("OTP")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("DbOTP");
                });

            modelBuilder.Entity("Model.QueryComments", b =>
                {
                    b.Property<int>("QueryCommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerQueryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStaffComment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUserComment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QueryCommentsId");

                    b.HasIndex("CustomerQueryId");

                    b.ToTable("DbQueryComments");
                });

            modelBuilder.Entity("Model.QueryTypeModel", b =>
                {
                    b.Property<int>("QueryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QueryTypeID");

                    b.HasIndex("PriorityId");

                    b.ToTable("DbQueryType");

                    b.HasData(
                        new
                        {
                            QueryTypeID = 1,
                            PriorityId = 3,
                            QueryType = "Regrading Loan"
                        },
                        new
                        {
                            QueryTypeID = 2,
                            PriorityId = 2,
                            QueryType = "Regrading Service"
                        },
                        new
                        {
                            QueryTypeID = 3,
                            PriorityId = 1,
                            QueryType = "Regrading Bank charges"
                        },
                        new
                        {
                            QueryTypeID = 4,
                            PriorityId = 1,
                            QueryType = "Regrading Interest Rates"
                        },
                        new
                        {
                            QueryTypeID = 5,
                            PriorityId = 4,
                            QueryType = "Regrading Failed Transcation"
                        },
                        new
                        {
                            QueryTypeID = 6,
                            PriorityId = 3,
                            QueryType = "Regrading Account Creation"
                        });
                });

            modelBuilder.Entity("Model.TransactionModel", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<long>("FromAccountNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerificationRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ToAccountNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionId");

                    b.HasIndex("FromAccountNumber");

                    b.HasIndex("ToAccountNumber");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("DbTransactions");
                });

            modelBuilder.Entity("Model.UsersModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEmployed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("DbUsers");
                });

            modelBuilder.Entity("Model.AccountModel", b =>
                {
                    b.HasOne("Model.MasterAccountTypeModel", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.UsersModel", "User")
                        .WithMany("Account")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.AccountUpdateTicket", b =>
                {
                    b.HasOne("Model.AccountModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Model.CustomerQueryModel", b =>
                {
                    b.HasOne("Model.UsersModel", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.CustomerQueryPriorityModel", "QueryPriority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.QueryTypeModel", "queryType")
                        .WithMany()
                        .HasForeignKey("QueryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.CustomerQueryStatusModel", "QueryStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QueryPriority");

                    b.Navigation("QueryStatus");

                    b.Navigation("User");

                    b.Navigation("queryType");
                });

            modelBuilder.Entity("Model.LoanModel", b =>
                {
                    b.HasOne("Model.LoanTypeModel", "LoanType")
                        .WithMany()
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.UsersModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.QueryComments", b =>
                {
                    b.HasOne("Model.CustomerQueryModel", "customerQuery")
                        .WithMany("QueryComments")
                        .HasForeignKey("CustomerQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerQuery");
                });

            modelBuilder.Entity("Model.QueryTypeModel", b =>
                {
                    b.HasOne("Model.CustomerQueryPriorityModel", "queryPriority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("queryPriority");
                });

            modelBuilder.Entity("Model.TransactionModel", b =>
                {
                    b.HasOne("Model.AccountModel", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountNumber")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.AccountModel", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToAccountNumber")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.MasterTransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Model.UsersModel", b =>
                {
                    b.HasOne("Model.MasterCustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.MasterRoles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Model.CustomerQueryModel", b =>
                {
                    b.Navigation("QueryComments");
                });

            modelBuilder.Entity("Model.UsersModel", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
